plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.12.0'
    id "io.freefair.lombok" version "8.11"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

version = '1.2.1'

allure {
    report {
        version.set("2.19.0")
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set("2.19.0")
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(
            "com.codeborne:selenide:6.19.1",
            "org.junit.jupiter:junit-jupiter:5.10.2",
            "org.slf4j:slf4j-simple:1.7.29",
            'org.assertj:assertj-core:3.23.1',
            'com.fasterxml.jackson.core:jackson-databind:2.17.0',
            'com.fasterxml.jackson.core:jackson-annotations:2.17.0',
            'org.projectlombok:lombok:1.18.30',
            'com.github.javafaker:javafaker:1.0.2',
            'io.qameta.allure:allure-selenide:2.28.1',
            'org.aeonbits.owner:owner:1.0.4',
            'io.rest-assured:rest-assured:4.2.0',
            'io.qameta.allure:allure-rest-assured:2.26.0',
            'io.appium:java-client:8.3.0',
            'commons-io:commons-io:2.11.0')
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}

tasks.withType(Test) {
    systemProperties(System.getProperties())

}
task generateAllureReport(type: Exec) {
    commandLine "allure", "generate build/allure-results"
}

test {
    systemProperties(System.getProperties())
    useJUnitPlatform {
        if (System.getProperty("tag") != null && !System.getProperty("tag").isEmpty()) {
            includeTags System.getProperty("tag")
        }
    }
}
